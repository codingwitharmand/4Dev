generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  username        String?           @unique
  emailVerified   DateTime?         @map("email_verified")
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  badges          Badge[]
  certificates    Certificate[]
  collaborations  Collaboration[]
  comments        Comment[]
  groupMembership GroupMembership[]
  Group           Group[]
  Like            Like[]
  Notification    Notification[]
  posts           Post[]
  profile         Profile?
  projects        Project[]
  sessions        Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id             Int      @id @default(autoincrement())
  userId         String   @unique
  bio            String?
  profilePicture String?
  githubUrl      String?
  linkedinUrl    String?
  portfolioUrl   String?
  public         Boolean? @default(false)
  user           User     @relation(fields: [userId], references: [id])
  skills         Skill[]

  @@map("profiles")
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  profileId Int?
  profile   Profile? @relation(fields: [profileId], references: [id])

  @@map("skills")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  imageUrl  String?
  codeBlock String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Project {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  imageUrl      String?
  githubUrl     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ownerId       String
  collaborators Collaboration[]
  owner         User            @relation(fields: [ownerId], references: [id])

  @@map("projects")
}

model Collaboration {
  id        Int     @id @default(autoincrement())
  userId    String
  projectId Int
  role      String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@map("collaborations")
}

model Group {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ownerId     String
  memberships GroupMembership[]
  owner       User              @relation(fields: [ownerId], references: [id])

  @@map("groups")
}

model GroupMembership {
  id      Int    @id @default(autoincrement())
  groupId Int
  userId  String
  role    String
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@map("group_memberships")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  awardedAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("badges")
}

model Certificate {
  id               Int      @id @default(autoincrement())
  title            String
  awardedAt        DateTime @default(now())
  userId           String
  verificationCode String   @unique
  user             User     @relation(fields: [userId], references: [id])

  @@map("certificates")
}
